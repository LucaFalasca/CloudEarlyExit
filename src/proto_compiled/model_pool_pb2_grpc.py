# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import model_pool_pb2 as model__pool__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in model_pool_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ModelPoolStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.push_model = channel.stream_unary(
                '/pool.ModelPool/push_model',
                request_serializer=model__pool__pb2.PushRequest.SerializeToString,
                response_deserializer=model__pool__pb2.PushResponse.FromString,
                _registered_method=True)
        self.pull_model = channel.unary_stream(
                '/pool.ModelPool/pull_model',
                request_serializer=model__pool__pb2.PullRequest.SerializeToString,
                response_deserializer=model__pool__pb2.PullResponse.FromString,
                _registered_method=True)
        self.pull_layer_models = channel.unary_stream(
                '/pool.ModelPool/pull_layer_models',
                request_serializer=model__pool__pb2.PullRequest.SerializeToString,
                response_deserializer=model__pool__pb2.LayerPullResponse.FromString,
                _registered_method=True)
        self.push_calibration_dataset = channel.stream_unary(
                '/pool.ModelPool/push_calibration_dataset',
                request_serializer=model__pool__pb2.CalibrationPushRequest.SerializeToString,
                response_deserializer=model__pool__pb2.PushResponse.FromString,
                _registered_method=True)
        self.pull_calibration_dataset = channel.unary_stream(
                '/pool.ModelPool/pull_calibration_dataset',
                request_serializer=model__pool__pb2.CalibrationPullRequest.SerializeToString,
                response_deserializer=model__pool__pb2.CalibrationChunk.FromString,
                _registered_method=True)


class ModelPoolServicer(object):
    """Missing associated documentation comment in .proto file."""

    def push_model(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pull_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pull_layer_models(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def push_calibration_dataset(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pull_calibration_dataset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelPoolServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'push_model': grpc.stream_unary_rpc_method_handler(
                    servicer.push_model,
                    request_deserializer=model__pool__pb2.PushRequest.FromString,
                    response_serializer=model__pool__pb2.PushResponse.SerializeToString,
            ),
            'pull_model': grpc.unary_stream_rpc_method_handler(
                    servicer.pull_model,
                    request_deserializer=model__pool__pb2.PullRequest.FromString,
                    response_serializer=model__pool__pb2.PullResponse.SerializeToString,
            ),
            'pull_layer_models': grpc.unary_stream_rpc_method_handler(
                    servicer.pull_layer_models,
                    request_deserializer=model__pool__pb2.PullRequest.FromString,
                    response_serializer=model__pool__pb2.LayerPullResponse.SerializeToString,
            ),
            'push_calibration_dataset': grpc.stream_unary_rpc_method_handler(
                    servicer.push_calibration_dataset,
                    request_deserializer=model__pool__pb2.CalibrationPushRequest.FromString,
                    response_serializer=model__pool__pb2.PushResponse.SerializeToString,
            ),
            'pull_calibration_dataset': grpc.unary_stream_rpc_method_handler(
                    servicer.pull_calibration_dataset,
                    request_deserializer=model__pool__pb2.CalibrationPullRequest.FromString,
                    response_serializer=model__pool__pb2.CalibrationChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pool.ModelPool', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pool.ModelPool', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ModelPool(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def push_model(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/pool.ModelPool/push_model',
            model__pool__pb2.PushRequest.SerializeToString,
            model__pool__pb2.PushResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pull_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/pool.ModelPool/pull_model',
            model__pool__pb2.PullRequest.SerializeToString,
            model__pool__pb2.PullResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pull_layer_models(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/pool.ModelPool/pull_layer_models',
            model__pool__pb2.PullRequest.SerializeToString,
            model__pool__pb2.LayerPullResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def push_calibration_dataset(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/pool.ModelPool/push_calibration_dataset',
            model__pool__pb2.CalibrationPushRequest.SerializeToString,
            model__pool__pb2.PushResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pull_calibration_dataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/pool.ModelPool/pull_calibration_dataset',
            model__pool__pb2.CalibrationPullRequest.SerializeToString,
            model__pool__pb2.CalibrationChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
